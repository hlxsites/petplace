/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
import { logLevelForStatusCode, propagateStatusCode } from '@adobe/helix-shared-utils';
import { IgnoreConfig } from '@adobe/helix-shared-config';
import { fetch } from './utils.js';

/**
 * Checks if the response is valid and returns a IgnoreConfig.
 *
 * @param {Logger} log logger
 * @param {Response} response content response from the storage
 * @param {string} key storage key (logging information)
 * @returns {Promise<MountConfig>} the IgnoreConfig
 *
 * @throws {Error('Unable to fetch hlxignore')}
 */
async function handleResponse(log, response, key) {
  const text = await response.text();
  if (response.ok) {
    return new IgnoreConfig().withSource(text).init();
  }

  if (response.status === 404) {
    log.info(`No .hlxignore found in github ${key}, ${text}`);
    return new IgnoreConfig().withSource('').init();
  }

  log[logLevelForStatusCode(response.status)](`Invalid response (${response.status}) when fetching hlxignore from github ${key}`);
  const err = new Error(`Unable to fetch hlxignore: ${response.status} ${text}`);
  err.status = propagateStatusCode(response.status);
  throw err;
}

/**
 * Retrieves the hlxignore from github and stores it in the context as IgnoreConfig.
 * If 404 is encountered, returns an empty IgnoreConfig that considers nothing ignored.
 *
 * @param {AdminContext} ctx the context
 * @param {LookupOptions} opts lookup options
 * @returns {Promise<IgnoreConfig>} the IgnoreConfig
 */
export async function fetchIgnore(ctx, opts) {
  const { attributes, log } = ctx;
  const {
    owner, repo, ref, branch,
  } = opts;

  if (attributes.ignoreConfig) {
    return attributes.ignoreConfig;
  }

  const key = `${owner}/${repo}/${branch || ref}/.hlxignore`;
  const headers = {};
  if (ctx.githubToken) {
    headers.authorization = `token ${ctx.githubToken}`;
  }
  const response = await fetch(`https://raw.githubusercontent.com/${key}`, {
    cache: 'no-store',
    headers,
  });

  attributes.ignoreConfig = await handleResponse(log, response, key);
  return attributes.ignoreConfig;
}
