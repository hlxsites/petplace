/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/**
 * Converts a config row-based name/value pair array with dotted key notation to an object.
 *
 * example:
 *
 * ```
 * host: www.adobe.com
 * document.level: 42,
 * document.title: hello
 * document.body.status: 200
 * acl.allow: /foo
 * acl.allow: /bar
 * cnd.0.type: fastly
 * cnd.0.host: www.adobe.com
 * cnd.1.type: cloudflare
 * ```
 *
 * becomes:
 *
 * ```
 * {
 *   host: 'www.adobe.com',
 *   document: {
 *     level: 42,
 *     title: 'hello',
 *     body: {
 *       status: 200,
 *     }
 *   },
 *   acl: {
 *     allow: ['/foo', '/bar],
 *   }
 *   cnd: [
 *     { type: 'fastly', host: 'www.adobe.com' },
 *     { type: 'cloudflare' },
 *   ]
 * }
 * ```
 *
 * @param {object[]} rows array of columns
 * @param {string} [keyName = 'key'] name of the key column.
 * @param {string} [valueName = 'value'] name of the value column.
 */
export function flatJson2object(rows, keyName = 'key', valueName = 'value') {
  const arrays = [];
  const update = (o, segs, value) => {
    const seg = segs.shift();
    if (segs.length) {
      if (seg in o) {
        update(o[seg], segs, value);
        return o;
      }
      const n = Number.parseInt(segs[0], 10);
      if (Number.isNaN(n)) {
        // eslint-disable-next-line no-param-reassign
        o[seg] = update(Object.create(null), segs, value);
      } else {
        // eslint-disable-next-line no-param-reassign
        o[seg] = update([], segs, value);
        arrays.push(o[seg]);
      }
      return o;
    }
    if (!(seg in o)) {
      // eslint-disable-next-line no-param-reassign
      o[seg] = value;
    } else if (Array.isArray(o[seg])) {
      // eslint-disable-next-line no-param-reassign
      o[seg].push(value);
    } else {
      // eslint-disable-next-line no-param-reassign
      o[seg] = [o[seg], value];
    }
    return o;
  };

  const obj = Object.create(null);
  rows.forEach((row) => {
    update(obj, String(row[keyName]).trim().split('.'), String(row[valueName]).trim());
  });

  // compact arrays
  arrays.forEach((a) => {
    for (let i = 0; i < a.length; i += 1) {
      if (!(i in a)) {
        a.splice(i, 1);
        i -= 1;
      }
    }
  });
  return obj;
}
