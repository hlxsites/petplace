/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
import { logLevelForStatusCode, propagateStatusCode } from '@adobe/helix-shared-utils';
import { MountConfig } from '@adobe/helix-shared-config';
import { fetchS3 } from './fetch-s3.js';

/**
 * Checks if the response is valid and returns the helix config.
 *
 * @param {Logger} log logger
 * @param {Response} response content response from the storage
 * @param {string} key storage key (logging information)
 * @param {string} type type of storage (logging information
 * @returns {Promise<HelixConfig>} the index config or null
 */
async function handleResponse(log, response, key, type) {
  const text = await response.text();
  if (response.ok) {
    const config = JSON.parse(text);
    // create mountconfig of the fstab entry
    if (config.fstab?.data) {
      config.fstab.data = await new MountConfig()
        .withSource(JSON.stringify(config.fstab.data)).init();
    }

    // set contentbus id, if present in header
    const cbid = response.headers.get('x-contentbus-id');
    if (cbid && !config.content) {
      // create the content section if not already present
      config.content = {
        data: Object.create(null),
      };
      const content = config.content.data;
      const nvps = cbid.split(/;\s+/);
      for (const nv of nvps) {
        const [path, id] = nv.split('=');
        if (!content[path]) {
          content[path] = {};
        }
        content[path].contentBusId = id;
      }
    }
    return config;
  }

  if (response.status === 404) {
    return null;
  }

  log[logLevelForStatusCode(response.status)](`Invalid response (${response.status}) when fetching helix-config from ${type} ${key}`);
  const err = new Error(`Unable to fetch helix-config: ${response.status} ${text}`);
  err.status = propagateStatusCode(response.status);
  throw err;
}

/**
 * Retrieves the helix-config.json which is an aggregate from fstab.yaml and head.html.
 *
 * @param {AdminContext} ctx the context
 * @param {PathInfo} info path info
 * @param {boolean} optional if {@code true} returns null if not found
 * @returns {Promise<HelixConfig>} the helix-config or {@code null} if optional and not found.
 */
export async function fetchHelixConfig(ctx, info, optional) {
  const { attributes, log } = ctx;
  const { owner, repo, ref } = info;

  if (!('helixConfig' in attributes)) {
    if (owner && repo && ref) {
      const key = `${owner}/${repo}/${ref}/helix-config.json`;
      const response = await fetchS3(ctx, 'helix-code-bus', key);
      attributes.helixConfig = await handleResponse(log, response, key, 'code-bus');
    } else {
      attributes.helixConfig = null;
    }
  }

  if (attributes.helixConfig || optional) {
    return attributes.helixConfig;
  }
  throw Error(`no helix-config for ${owner}/${repo}/${ref}`);
}
