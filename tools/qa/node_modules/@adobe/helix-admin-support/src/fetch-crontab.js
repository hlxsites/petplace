/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
import { logLevelForStatusCode, propagateStatusCode } from '@adobe/helix-shared-utils';

import { fetchS3 } from './fetch-s3.js';
import { getContentBusId } from './contentbus.js';

/**
 * Checks if the response is valid and returns the project config.
 *
 * @param {Logger} log logger
 * @param {Response} response content response from the storage
 * @param {string} key storage key (logging information)
 * @param {string} type type of storage (logging information)
 * @returns {Promise<ProjectConfig>} the helix project config or null
 */
async function handleResponse(log, response, key, type) {
  const text = await response.text();
  if (response.ok) {
    let props;
    try {
      const json = JSON.parse(text);
      props = json.data;
      // eslint-disable-next-line no-empty
    } catch (ignore) { }
    if (!props) {
      log.info(`Empty or invalid .helix/crontab.json found in ${type} ${key}`);
      return null;
    }
    return props;
  }

  if (response.status === 404) {
    log.info(`No .helix/crontab.json found in ${type} ${key}, ${text}`);
    return null;
  }

  log[logLevelForStatusCode(response.status)](
    `Invalid response (${response.status}) when fetching crontab from ${type} ${key}`,
  );
  const err = new Error(`Unable to fetch crontab: ${response.status} ${text}`);
  err.status = propagateStatusCode(response.status);
  throw err;
}

/**
 * Retrieves the project config from the underlying storage
 * and stores it in the context as projectConfig.
 * @param {AdminContext} ctx the context
 * @param {LookupOptions} opts lookup options
 * @returns {Promise<ProjectConfig>} the project configuration
 */
export async function fetchCrontab(ctx, opts) {
  const { log, attributes } = ctx;
  const getConfig = async () => {
    const contentBusId = await getContentBusId(ctx, opts, true);
    if (!contentBusId) {
      return null;
    }
    const key = `${contentBusId}/preview/.helix/crontab.json`;
    const response = await fetchS3(ctx, 'helix-content-bus', key);
    return handleResponse(log, response, key, 'content-bus');
  };

  if (attributes.crontab === undefined) {
    attributes.crontab = await getConfig();
  }
  return attributes.crontab;
}
