/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
import crypto from 'crypto';
import { fetchFstab } from './fetch-fstab.js';
import { fetchHelixConfig } from './fetch-helix-config.js';

/**
 * Retrieves the content bus id by calculating the hash from the fstab.
 * @param {AdminContext} ctx the context
 * @param {PathInfo} info lookup options
 * @returns {Promise<string|null>} the content bus id or {@code null}
 *                                 if no fstab or no mountpoint not found in fstab
 */
export async function calculateContentBusId(ctx, info) {
  const { path } = info;
  const fstab = await fetchFstab(ctx, info, true);
  if (!fstab) {
    return null;
  }
  const mp = fstab.match(path);
  if (!mp) {
    ctx.log.error(`path specified is not mounted in fstab.yaml: ${path}`);
    return null;
  }
  const sha256 = crypto
    .createHash('sha256')
    .update(mp.url)
    .digest('hex');
  const contentBusId = `${sha256.substring(0, 59)}`;
  ctx.log.info(`computed contentBusId: ${contentBusId} for ${mp.url} of ${info.repo}--${info.owner}`);
  return contentBusId;
}

/**
 * Retrieves the content bus id either from the context or by reading fstab entry of
 * helix-config.json. If the helix-config.json does contain the information (yet) it will fall back
 * to {@link #calculateContentBusId}.
 *
 * @param {AdminContext} ctx the context
 * @param {PathInfo} info lookup options
 * @param {boolean} optional if {@code true} it will return {@code null} if none of the sources
 *                           exists.
 * @returns {Promise<string>} the content bus id
 */
export async function getContentBusId(ctx, info, optional) {
  const fetchId = async () => {
    const helixConfig = await fetchHelixConfig(ctx, info, true);
    if (helixConfig?.content?.data) {
      const id = helixConfig.content.data['/']?.contentBusId;
      if (id) {
        ctx.log.info(`loaded contentBusId: ${id} for ${info.repo}--${info.owner}`);
        return id;
      }
    }
    return calculateContentBusId(ctx, { ...info, path: '/' });
  };

  if (ctx.attributes.contentBusId === undefined) {
    ctx.attributes.contentBusId = await fetchId();
  }

  if (ctx.attributes.contentBusId || optional) {
    return ctx.attributes.contentBusId;
  }
  throw Error(`unable to load contentbus-id for ${info.owner}/${info.repo}/${info.ref}`);
}
