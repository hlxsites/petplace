export type UnistParent = import('unist').Parent
export type MdastContent = import('mdast').Content
export type MdastRoot = import('mdast').Root
export type Content = import('hast').Content
export type Root = import('hast').Root
export type Element = import('hast').Element
export type State = import('./state.js').State
export type MdastNode = MdastContent | MdastRoot
export type Node = Content | Root
export type Parent = Extract<Node, UnistParent>
/**
 * Handle a particular element.
 */
export type Handle = (
  state: State,
  element: Element,
  parent: Parent | undefined
) => MdastNode | Array<MdastNode> | void
/**
 * Handle a particular node.
 */
export type NodeHandle = (
  state: State,
  node: any,
  parent: Parent | undefined
) => MdastNode | Array<MdastNode> | void
/**
 * Configuration.
 */
export type Options = {
  /**
   * Keep line endings when collapsing whitespace.
   *
   * The default collapses to a single space.
   */
  newlines?: boolean | null | undefined
  /**
   * Value to use for a checked checkbox or radio input.
   */
  checked?: string | null | undefined
  /**
   * Value to use for an unchecked checkbox or radio input.
   */
  unchecked?: string | null | undefined
  /**
   * List of quotes to use.
   *
   * Each value can be one or two characters.
   * When two, the first character determines the opening quote and the second
   * the closing quote at that level.
   * When one, both the opening and closing quote are that character.
   *
   * The order in which the preferred quotes appear determines which quotes to
   * use at which level of nesting.
   * So, to prefer `‘’` at the first level of nesting, and `“”` at the second,
   * pass `['‘’', '“”']`.
   * If `<q>`s are nested deeper than the given amount of quotes, the markers
   * wrap around: a third level of nesting when using `['«»', '‹›']` should
   * have double guillemets, a fourth single, a fifth double again, etc.
   */
  quotes?: Array<string> | null | undefined
  /**
   * Whether the given tree represents a complete document.
   *
   * Applies when the `tree` is a `root` node.
   * When the tree represents a complete document, then things are wrapped in
   * paragraphs when needed, and otherwise they’re left as-is.
   * The default checks for whether there’s mixed content: some phrasing nodes
   * *and* some non-phrasing nodes.
   */
  document?: boolean | null | undefined
  /**
   * Object mapping tag names to functions handling the corresponding elements.
   *
   * Merged into the defaults.
   */
  handlers?: Record<string, Handle | null | undefined> | null | undefined
  /**
   * Object mapping node types to functions handling the corresponding nodes.
   *
   * Merged into the defaults.
   */
  nodeHandlers?:
    | Record<string, NodeHandle | null | undefined>
    | null
    | undefined
}
