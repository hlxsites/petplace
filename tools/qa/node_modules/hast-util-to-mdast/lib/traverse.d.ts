/**
 * @param {State} state
 *   State.
 * @param {Node} node
 *   hast node to transform.
 * @param {Parent | undefined} parent
 *   Parent of `node`.
 * @returns {MdastNode | Array<MdastNode> | void}
 *   mdast results.
 */
export function one(
  state: State,
  node: Node,
  parent: Parent | undefined
): MdastNode | Array<MdastNode> | void
/**
 * @param {State} state
 *   State.
 * @param {Parent} parent
 *   Parent to transform.
 * @returns {Array<MdastContent>}
 *   mdast nodes.
 */
export function all(state: State, parent: Parent): Array<MdastContent>
/**
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Content} Content
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('mdast').Content} MdastContent
 * @typedef {import('./state.js').State} State
 * @typedef {import('./types.js').Handle} Handle
 */
/**
 * @typedef {Root | Content} Node
 * @typedef {Extract<Node, import('unist').Parent>} Parent
 * @typedef {MdastRoot | MdastContent} MdastNode
 */
export const own: (v: PropertyKey) => boolean
export type Root = import('hast').Root
export type Content = import('hast').Content
export type MdastRoot = import('mdast').Root
export type MdastContent = import('mdast').Content
export type State = import('./state.js').State
export type Handle = import('./types.js').Handle
export type Node = Root | Content
export type Parent = Extract<Node, import('unist').Parent>
export type MdastNode = MdastRoot | MdastContent
